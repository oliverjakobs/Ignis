#ifndef IGNIS_TYPES_H
#define IGNIS_TYPES_H

#ifdef __cplusplus
extern "C"
{
#endif

#include "../external/glad.h"

#include <stdint.h>

typedef void* (*ignisGLLoadProc)(const char* name);   // OpenGL extension functions loader signature (same as GLADloadproc)

typedef enum IgnisType
{
    IGNIS_INT8   = GL_BYTE,
    IGNIS_UINT8  = GL_UNSIGNED_BYTE,
    IGNIS_INT16  = GL_SHORT,
    IGNIS_UINT16 = GL_UNSIGNED_SHORT,
    IGNIS_INT32  = GL_INT,
    IGNIS_UINT32 = GL_UNSIGNED_INT,
    IGNIS_FLOAT  = GL_FLOAT
} IgnisType;

typedef enum IgnisBufferUsage
{
    IGNIS_STREAM_DRAW  = GL_STREAM_DRAW,
    IGNIS_STREAM_READ  = GL_STREAM_READ,
    IGNIS_STREAM_COPY  = GL_STREAM_COPY,
    IGNIS_STATIC_DRAW  = GL_STATIC_DRAW,
    IGNIS_STATIC_READ  = GL_STATIC_READ,
    IGNIS_STATIC_COPY  = GL_STATIC_COPY,
    IGNIS_DYNAMIC_DRAW = GL_DYNAMIC_DRAW,
    IGNIS_DYNAMIC_READ = GL_DYNAMIC_READ,
    IGNIS_DYNAMIC_COPY = GL_DYNAMIC_COPY
} IgnisUsage;

typedef enum IgnisBufferTarget
{
    IGNIS_TEXTURE_BUFFER       = GL_TEXTURE_BUFFER,
    IGNIS_RENDERBUFFER         = GL_RENDERBUFFER,
    IGNIS_ARRAY_BUFFER         = GL_ARRAY_BUFFER,
    IGNIS_ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER
} IgnisBufferTarget;

typedef enum IgnisShaderType
{
    IGNIS_COMPUTE_SHADER      = GL_COMPUTE_SHADER,
    IGNIS_VERTEX_SHADER       = GL_VERTEX_SHADER,
    IGNIS_TESS_CONTROL_SHADER = GL_TESS_CONTROL_SHADER,
    IGNIS_TESS_EVAL_SHADER    = GL_TESS_EVALUATION_SHADER,
    IGNIS_GEOMETRY_SHADER     = GL_GEOMETRY_SHADER,
    IGNIS_FRAGMENT_SHADER     = GL_FRAGMENT_SHADER,
} IgnisShaderType;

typedef enum IgnisTextureTarget
{
    IGNIS_TEXTURE_1D                  = GL_TEXTURE_1D,
    IGNIS_PROXY_TEXTURE_1D            = GL_PROXY_TEXTURE_1D,
    IGNIS_TEXTURE_2D                  = GL_TEXTURE_2D,
    IGNIS_PROXY_TEXTURE_2D            = GL_PROXY_TEXTURE_2D,
    IGNIS_TEXTURE_1D_ARRAY            = GL_TEXTURE_1D_ARRAY,
    IGNIS_PROXY_TEXTURE_1D_ARRAY      = GL_PROXY_TEXTURE_1D_ARRAY,
    IGNIS_TEXTURE_RECTANGLE           = GL_TEXTURE_RECTANGLE,
    IGNIS_PROXY_TEXTURE_RECTANGLE     = GL_PROXY_TEXTURE_RECTANGLE,
    IGNIS_TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
    IGNIS_TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
    IGNIS_TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
    IGNIS_TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
    IGNIS_TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
    IGNIS_TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
    IGNIS_PROXY_TEXTURE_CUBE_MAP      = GL_PROXY_TEXTURE_CUBE_MAP
} IgnisTextureTarget;

typedef enum IgnisTextureFormat
{
    IGNIS_R               = GL_RED,
    IGNIS_RG              = GL_RG,
    IGNIS_RGB             = GL_RGB,
    IGNIS_BGR             = GL_BGR,
    IGNIS_RGBA            = GL_RGBA,
    IGNIS_BGRA            = GL_BGRA,
    IGNIS_R_INTEGER       = GL_RED_INTEGER,
    IGNIS_RG_INTEGER      = GL_RG_INTEGER,
    IGNIS_RGB_INTEGER     = GL_RGB_INTEGER,
    IGNIS_BGR_INTEGER     = GL_BGR_INTEGER,
    IGNIS_RGBA_INTEGER    = GL_RGBA_INTEGER,
    IGNIS_BGRA_INTEGER    = GL_BGRA_INTEGER,
    IGNIS_STENCIL_INDEX   = GL_STENCIL_INDEX,
    IGNIS_DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
    IGNIS_DEPTH_STENCIL   = GL_DEPTH_STENCIL
} IgnisTextureFormat;

typedef enum IgnisTextureFilter
{
    IGNIS_NEAREST                = GL_NEAREST,
    IGNIS_LINEAR                 = GL_LINEAR,
    /* only for min filter */
    IGNIS_NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
    IGNIS_LINEAR_MIPMAP_NEAREST  = GL_LINEAR_MIPMAP_NEAREST,
    IGNIS_NEAREST_MIPMAP_LINEAR  = GL_NEAREST_MIPMAP_LINEAR,
    IGNIS_LINEAR_MIPMAP_LINEAR   = GL_LINEAR_MIPMAP_LINEAR
} IgnisTextureFilter;

typedef enum IgnisTextureWrap
{
    IGNIS_CLAMP_TO_EDGE        = GL_CLAMP_TO_EDGE,
    IGNIS_CLAMP_TO_BORDER      = GL_CLAMP_TO_BORDER,
    IGNIS_MIRRORED_REPEAT      = GL_MIRRORED_REPEAT,
    IGNIS_REPEAT               = GL_REPEAT,
    IGNIS_MIRROR_CLAMP_TO_EDGE = GL_MIRROR_CLAMP_TO_EDGE
} IgnisTextureWrap;


typedef enum IgnisPrimitiveType
{
    IGNIS_POINTS                    = GL_POINTS,
    IGNIS_LINE_STRIP                = GL_LINE_STRIP,
    IGNIS_LINE_LOOP                 = GL_LINE_LOOP,
    IGNIS_LINES                     = GL_LINES,
    IGNIS_LINE_STRIP_ADJACENCY      = GL_LINE_STRIP_ADJACENCY,
    IGNIS_LINES_ADJACENCY           = GL_LINES_ADJACENCY,
    IGNIS_TRIANGLE_STRIP            = GL_TRIANGLE_STRIP,
    IGNIS_TRIANGLE_FAN              = GL_TRIANGLE_FAN,
    IGNIS_TRIANGLES                 = GL_TRIANGLES,
    IGNIS_TRIANGLE_STRIP_ADJACENCY  = GL_TRIANGLE_STRIP_ADJACENCY,
    IGNIS_TRIANGLES_ADJACENCY       = GL_TRIANGLES_ADJACENCY,
    IGNIS_PATCHES                   = GL_PATCHES
} IgnisPrimitiveType;

typedef enum IgnisBlendFunc
{
    IGNIS_ZERO                     = GL_ZERO,
    IGNIS_ONE                      = GL_ONE,
    IGNIS_SRC_COLOR                = GL_SRC_COLOR,
    IGNIS_ONE_MINUS_SRC_COLOR      = GL_ONE_MINUS_SRC_COLOR,
    IGNIS_DST_COLOR                = GL_DST_COLOR,
    IGNIS_ONE_MINUS_DST_COLOR      = GL_ONE_MINUS_DST_COLOR,
    IGNIS_SRC_ALPHA                = GL_SRC_ALPHA,
    IGNIS_ONE_MINUS_SRC_ALPHA      = GL_ONE_MINUS_SRC_ALPHA,
    IGNIS_DST_ALPHA                = GL_DST_ALPHA,
    IGNIS_ONE_MINUS_DST_ALPHA      = GL_ONE_MINUS_DST_ALPHA,
    IGNIS_CONSTANT_COLOR           = GL_CONSTANT_COLOR,
    IGNIS_ONE_MINUS_CONSTANT_COLOR = GL_ONE_MINUS_CONSTANT_COLOR,
    IGNIS_CONSTANT_ALPHA           = GL_CONSTANT_ALPHA,
    IGNIS_ONE_MINUS_CONSTANT_ALPHA = GL_ONE_MINUS_CONSTANT_ALPHA,
    IGNIS_SRC_ALPHA_SATURATE       = GL_SRC_ALPHA_SATURATE,
    IGNIS_SRC1_COLOR               = GL_SRC1_COLOR,
    IGNIS_ONE_MINUS_SRC1_COLOR     = GL_ONE_MINUS_SRC1_COLOR,
    IGNIS_SRC1_ALPHA               = GL_SRC1_ALPHA,
    IGNIS_ONE_MINUS_SRC1_ALPHA     = GL_ONE_MINUS_SRC1_ALPHA
} IgnisBlendFunc;

#ifdef __cplusplus
}
#endif

#endif /* !IGNIS_TYPES_H */