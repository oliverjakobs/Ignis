#version 430

// one dimensional problem with a group size of 64
layout (local_size_x = 64) in;
// x,y -> position; z -> generated value to distribute lifecycles; w -> remaining lifetime 
layout (rgba32f, binding = 0) uniform imageBuffer buffer_particle; 
// x.y -> velocity; z,w -> unused
layout (rgba32f, binding = 1) uniform imageBuffer buffer_velocity;

uniform float deltaTime;		// timestep to keep simulation seperated from fps
uniform float particleRadius;	// particle speed factor, changing the radius in which the particles travel

uniform vec2 mousePos;

void main () 
{
	// loading 
	vec4 particle = imageLoad(buffer_particle, int(gl_GlobalInvocationID.x));
	vec4 velocity = imageLoad(buffer_velocity, int(gl_GlobalInvocationID.x));
	
	// decrease lifetime
	particle.w -= deltaTime;

	if (particle.w > 0.0) // if the particle is still alive update it
	{
		particle.xy += velocity.xy * particleRadius * deltaTime;
	}
	else if (particle.w <= - particle.z) // if the particle is dead long enough respawn it
	{
		particle.xy = mousePos;
		particle.w = particle.z;
	}
	
	// storing
	imageStore(buffer_particle, int(gl_GlobalInvocationID.x), particle);
	imageStore(buffer_velocity, int(gl_GlobalInvocationID.x), velocity);
}