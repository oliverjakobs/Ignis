#include "Shader.h"

#include "Obelisk/Obelisk.h"

namespace ignis
{
	Shader::Shader(const std::string& vert, const std::string& frag)
	{
		m_program = CreateShader(obelisk::ReadFile(vert), "", obelisk::ReadFile(frag));

		if (!glIsProgram(m_program))
			DEBUG_ERROR("[SHADER] Failed to create shader from {0} or {1}", vert, frag);
	}

	Shader::~Shader()
	{
		glDeleteProgram(m_program);
	}

	void Shader::Use()
	{
		DEBUG_ASSERT(glIsProgram(m_program), "Program handle does not refer to an object generated by OpenGL.");
		glUseProgram(m_program);
	}

	void Shader::SetUniform1i(const std::string& name, int value) const
	{
		int location = GetUniformLocation(name);

		if (location < 0)
			DEBUG_WARN("[SHADER] Uniform {0} not found", name);
		else
			glUniform1i(location, value);
	}

	void Shader::SetUniform1f(const std::string& name, float value) const
	{
		int location = GetUniformLocation(name);

		if (location < 0)
			DEBUG_WARN("[SHADER] Uniform {0} not found", name);
		else
			glUniform1f(location, value);
	}

	void Shader::SetUniform2f(const std::string& name, const glm::vec2& vector) const
	{
		int location = GetUniformLocation(name);

		if (location < 0)
			DEBUG_WARN("[SHADER] Uniform {0} not found", name);
		else
			glUniform2fv(location, 1, &vector[0]);
	}

	void Shader::SetUniform3f(const std::string& name, const glm::vec3& vector) const
	{
		int location = GetUniformLocation(name);

		if (location < 0)
			DEBUG_WARN("[SHADER] Uniform {0} not found", name);
		else
			glUniform3fv(location, 1, &vector[0]);
	}

	void Shader::SetUniform4f(const std::string& name, const glm::vec4& vector) const
	{
		int location = GetUniformLocation(name);

		if (location < 0)
			DEBUG_WARN("[SHADER] Uniform {0} not found", name);
		else
			glUniform4fv(location, 1, &vector[0]);
	}

	void Shader::SetUniformMat2(const std::string& name, const glm::mat4& matrix) const
	{
		int location = GetUniformLocation(name);

		if (location < 0)
			DEBUG_WARN("[SHADER] Uniform {0} not found", name);
		else
			glUniformMatrix2fv(location, 1, GL_FALSE, &matrix[0][0]);
	}

	void Shader::SetUniformMat3(const std::string& name, const glm::mat4& matrix) const
	{
		int location = GetUniformLocation(name);

		if (location < 0)
			DEBUG_WARN("[SHADER] Uniform {0} not found", name);
		else
			glUniformMatrix3fv(location, 1, GL_FALSE, &matrix[0][0]);
	}

	void Shader::SetUniformMat4(const std::string& name, const glm::mat4& matrix) const
	{
		int location = GetUniformLocation(name);

		if (location < 0)
			DEBUG_WARN("[SHADER] Uniform {0} not found", name);
		else
			glUniformMatrix4fv(location, 1, GL_FALSE, &matrix[0][0]);
	}

	int Shader::GetUniformLocation(const std::string& name) const
	{
		return glGetUniformLocation(m_program, name.c_str());
	}

	void Shader::SetUniform1i(int location, int value) const
	{
		glUniform1i(location, value);
	}

	void Shader::SetUniform1f(int location, float value) const
	{
		glUniform1f(location, value);
	}

	void Shader::SetUniform2f(int location, const glm::vec2& vector) const
	{
		glUniform2fv(location, 1, &vector[0]);
	}

	void Shader::SetUniform3f(int location, const glm::vec3& vector) const
	{
		glUniform3fv(location, 1, &vector[0]);
	}

	void Shader::SetUniform4f(int location, const glm::vec4& vector) const
	{
		glUniform4fv(location, 1, &vector[0]);
	}

	void Shader::SetUniformMat2(int location, const glm::mat4& matrix) const
	{
		glUniformMatrix2fv(location, 1, GL_FALSE, &matrix[0][0]);
	}

	void Shader::SetUniformMat3(int location, const glm::mat4& matrix) const
	{
		glUniformMatrix3fv(location, 1, GL_FALSE, &matrix[0][0]);
	}

	void Shader::SetUniformMat4(int location, const glm::mat4& matrix) const
	{
		glUniformMatrix4fv(location, 1, GL_FALSE, &matrix[0][0]);
	}
}